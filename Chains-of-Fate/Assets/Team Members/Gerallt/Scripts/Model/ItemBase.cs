using System;
using UnityEngine;

namespace ChainsOfFate.Gerallt
{
    public abstract class ItemBase : MonoBehaviour, IDescriptive
    {
        #region Fields
        
        /// <summary>
        /// The ID of the item. Internally generated by a GUID.
        /// No need to manually set this.
        /// </summary>
        private string id;

        [SerializeField] private string itemName;
        [SerializeField] private string itemDescription;
        [SerializeField] private Color representation;
        [SerializeField] private bool randomTintColour = true;
        #endregion

        #region Properties

        public string ID => id;

        public string ItemName
        {
            get => itemName;
            set
            {
                itemName = value;
                RaiseStatChanged("ItemName", value);
            }
        }

        public string ItemDescription
        {
            get => itemDescription;
            set
            {
                itemDescription = value;
                RaiseStatChanged("ItemDescription", value);
            }
        }

        #endregion

        // Unity can't serialise properties which is a shame. Because when properties change we could call RaiseStatChanged() internally.
        public delegate void StatChangeDelegate(ItemBase item, string propertyName, object newValue);

        public event StatChangeDelegate OnStatChanged;

        public virtual void UpdatePrimaryStats()
        {
            RaiseStatChanged("ID", ID);
            RaiseStatChanged("ItemName", ItemName);
            RaiseStatChanged("ItemDescription", ItemDescription);
        }

        protected void RaiseStatChanged(string propertyName, object newValue)
        {
            OnStatChanged?.Invoke(this, propertyName, newValue);
        }

        public virtual void UseItem(CharacterBase user)
        {
            
        }
        
        public string GetId()
        {
            return ID;
        }
        
        public string GetName()
        {
            return ItemName;
        }

        public string GetDescription()
        {
            return ItemDescription;
        }

        public Color GetTint()
        {
            return representation;
        }
        
        public virtual void Awake()
        {
            Guid newId = Guid.NewGuid(); //TODO: Check for collisions with items that by pure unluck might have the same GUID.
            id = newId.ToString();

            if (randomTintColour)
            {
                representation = GameManager.RandomColour();
            }
        }
    }
}